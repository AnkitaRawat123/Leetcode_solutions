class Solution {
    public int rob(int[] arr) {
        int [] dp=new int[arr.length];
		Arrays.fill(dp, -1);
    return robberBU(arr);
    }
// public static int robber(int [] arr,int i,int [] dp) {
// 		if(i>=arr.length) {
// 			return 0;
// 		}
// 		if(dp[i]!=-1) {
// 			return dp[i];
// 		}
// 		int rob=arr[i]+robber(arr,i+2,dp);
// 		int dont_rob=robber(arr,i+1,dp);
// 		return dp[i]=Math.max(rob, dont_rob);

// 	}


	public static int robberBU(int[] arr) 
	{
		if(arr.length==1){
			return arr[0];
		}
		int[] dp = new int[arr.length];

		dp[0] = arr[0];
		dp[1] = Math.max(arr[0], arr[1]);

		for (int i = 2; i < dp.length; i++) {
			int rob = arr[i] + dp[i - 2];
			int Do_ntrob = dp[i - 1];
			dp[i] = Math.max(rob, Do_ntrob);
		}
		return dp[arr.length - 1];

	}


}
